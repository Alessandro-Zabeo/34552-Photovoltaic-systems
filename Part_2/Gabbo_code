# import pandas as pd
# import numpy as np
# import matplotlib.pyplot as plt

# #Load data and initialise relevant values
# data = pd.read_csv("2023_weather_data.csv")
# data['TmStamp'] = pd.to_datetime(data['TmStamp'])
# #data['Month'] = pd.to_datetime(data['TmStamp']).dt.month
# PV_tilt = [0, 90*np.pi/180, 45*np.pi/180, 45*np.pi/180] #Beta tilt angle in radians
# PV_azimuth = [0, 0, 0, 90] #gamma angle
# PV_orientation = ['Horizontal', 'Vertical', 'South', 'West']
# albedo = 0.2 #rho_g

# #Initialise data frames and calculate solar azimuth
# angles, AOI, AOI_degree, G_BPOA, G_DPOA, G_RPOA, G_POA = [pd.DataFrame() for _ in range(7)]
# angles['SolarZenith'] = 90 - data['SolarElevation'] #Theta_Z
# angles['SolarAzimuth'] = data['SolarAzimuth'] #gamma_Z


# #Calculate AOI (theta) (stored in data frames as cos(theta) and in degrees)
# for i in range(4):
#     AOI[PV_orientation[i]] = (np.cos(PV_tilt[i]) * np.cos(angles['SolarZenith']*np.pi/180)) + (np.sin(PV_tilt[i]) * np.sin(angles['SolarZenith']*np.pi/180) * np.cos((angles['SolarAzimuth']-PV_azimuth[i])*np.pi/180))
#     AOI_degree[PV_orientation[i]] = np.arccos(AOI[PV_orientation[i]]) * (180/np.pi)

# #Calculate G_POA contributions
# for i, col in enumerate(AOI_degree.columns):
#     for idx in AOI_degree.index:
#         if AOI_degree.at[idx, col] > 90:
#             G_BPOA.at[idx, col] = 0
#         else: 
#             G_BPOA.at[idx, col] = data.at[idx, 'DNI_calc'] * AOI.at[idx, col] #Direct beam irradiance
          
#     G_DPOA[PV_orientation[i]] = data['DHI'] * (1 + np.cos(PV_tilt[i]))/2 # Diffuse irradiance
#     G_RPOA[PV_orientation[i]] = data['GHI'] * albedo * (1 - np.cos(PV_tilt[i]))/2 #Ground reflected irradiance
#     G_POA[PV_orientation[i]] = G_BPOA[PV_orientation[i]] + G_DPOA[PV_orientation[i]] + G_RPOA[PV_orientation[i]]       


# G_POA['date'] = data['TmStamp'].dt.date



# daily_GPOA = G_POA.groupby('date').sum()
# #daily_GPOA = G_POA.groupby('date').mean() has been changed

# daily_GPOA.index = pd.to_datetime(daily_GPOA.index)
# #monthly_avg wasn't working properly

# monthly_avg4 = daily_GPOA.resample('M').sum() / daily_GPOA.resample('M').count()


# G_POA_annual = G_POA.sum()
# #monthly_avg = G_POA.groupby(data['TmStamp'].dt.to_period('M')).mean()




# #sums = daily_GPOA.sum() #annual energy for 4 surfaces?
# #average = sums/363


# #daily_GPOA.to_excel("daily_GPOA.xlsx", index=False)





# plt.figure(figsize=(10, 6))
# for column in monthly_avg4.columns:
#     plt.plot(monthly_avg4.index, monthly_avg4[column], label=column)  # Usa direttamente monthly_avg.index
# plt.title('Monthly Averages')
# plt.xlabel('Month')
# plt.ylabel('Average Value')
# plt.legend()
# plt.show()



# # Plot daily averages
# plt.figure(figsize=(10, 6))
# for column in daily_GPOA.columns:
#     plt.plot(daily_GPOA.index, daily_GPOA[column], label=column)
# plt.title('Daily Averages')
# plt.xlabel('Date')
# plt.ylabel('Average Value')
# plt.legend()
# plt.show()

'''FINAL_CODE_UPDATE'''

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import calendar

# Load data and initialise relevant values
data = pd.read_csv("2023_weather_data.csv")
data['TmStamp'] = pd.to_datetime(data['TmStamp'])

PV_tilt = [0, 90*np.pi/180, 45*np.pi/180, 45*np.pi/180] # Beta tilt angle in radians
PV_azimuth = [0, 0, 0, 90] # Gamma angle
PV_orientation = ['Horizontal', 'Vertical', 'South', 'West']
rho = 0.2 # Ground reflectivity

# Initialise data frames and calculate solar azimuth
angles = pd.DataFrame()
angles['SolarZenith'] = 90 - data['SolarElevation'] # Theta_Z in degrees
angles['SolarAzimuth'] = data['SolarAzimuth'] # Gamma_Z in degrees

G_POA = pd.DataFrame()
G_DPOA_df = pd.DataFrame()
G_BPOA_df = pd.DataFrame()
G_RPOA_df = pd.DataFrame()

# Calculate AOI (theta) and G_POA contributions
for i in range(4):
    beta = PV_tilt[i]
    gamma = PV_azimuth[i]
    G_BPOA_values = []
    G_DPOA_values = []
    G_RPOA_values = []
    G_POA_values = []

    AOI = (np.cos(beta) * np.cos(angles['SolarZenith']*np.pi/180)) + (np.sin(beta) * np.sin(angles['SolarZenith']*np.pi/180) * np.cos((angles['SolarAzimuth']-gamma)*np.pi/180))
    AOI_degree = np.arccos(AOI) * (180/np.pi)

    for idx in AOI_degree.index:
        if AOI_degree.at[idx] > 90:
            G_BPOA = 0
        else: 
            G_BPOA = data.at[idx, 'DNI_calc'] * AOI.at[idx] # Direct beam irradiance
        G_BPOA_values.append(G_BPOA)

        G_DPOA = data.at[idx, 'DHI'] * (1 + np.cos(beta))/2 # Diffuse irradiance
        G_DPOA_values.append(G_DPOA)

        G_RPOA = data.at[idx, 'GHI'] * rho * (1 - np.cos(beta))/2 # Ground reflected irradiance
        G_RPOA_values.append(G_RPOA)

        G_POA_values.append(G_BPOA + G_DPOA + G_RPOA)

    G_POA[PV_orientation[i]] = G_POA_values
    G_DPOA_df[PV_orientation[i]] = G_DPOA_values
    G_BPOA_df[PV_orientation[i]] = G_BPOA_values
    G_RPOA_df[PV_orientation[i]] = G_RPOA_values

G_POA['date'] = pd.to_datetime(data['TmStamp'].dt.date)
G_DPOA_df['date'] = pd.to_datetime(data['TmStamp'].dt.date)
G_BPOA_df['date'] = pd.to_datetime(data['TmStamp'].dt.date)
G_RPOA_df['date'] = pd.to_datetime(data['TmStamp'].dt.date)

monthly_GPOA = G_POA.groupby(G_POA['date'].dt.to_period('M')).mean()
monthly_GDPOA = G_DPOA_df.groupby(G_DPOA_df['date'].dt.to_period('M')).mean()
monthly_GBPOA = G_BPOA_df.groupby(G_BPOA_df['date'].dt.to_period('M')).mean()
monthly_GRPOA = G_RPOA_df.groupby(G_RPOA_df['date'].dt.to_period('M')).mean()

# Plot monthly averages for G_BPOA, G_DPOA, G_RPOA, and G_POA for each PV angle configuration
for i in range(4):
    plt.figure(figsize=(10, 6))
    plt.plot(monthly_GPOA.index.strftime('%Y-%m'), monthly_GPOA[PV_orientation[i]], label=f'G_POA {PV_orientation[i]}')
    plt.plot(monthly_GBPOA.index.strftime('%Y-%m'), monthly_GBPOA[PV_orientation[i]], label=f'G_BPOA {PV_orientation[i]}', linestyle='dashed')
    plt.plot(monthly_GDPOA.index.strftime('%Y-%m'), monthly_GDPOA[PV_orientation[i]], label=f'G_DPOA {PV_orientation[i]}', linestyle='dotted')
    plt.plot(monthly_GRPOA.index.strftime('%Y-%m'), monthly_GRPOA[PV_orientation[i]], label=f'G_RPOA {PV_orientation[i]}', linestyle='dashdot')
    plt.title(f'Monthly Averages for {PV_orientation[i]} Configuration')
    plt.xlabel('Month')
    plt.ylabel('Value')
    plt.xticks(rotation=90)
    plt.legend()
    plt.show()
