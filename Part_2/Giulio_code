import math
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import calendar

class SolarCalculator:
    def __init__(self, beta, gamma, teta_z, alfa_s, gamma_s, DNI, DHI, GHI, rho):
        self.beta = beta
        self.gamma = gamma
        self.teta_z = teta_z
        self.alfa_s = alfa_s
        self.gamma_s = gamma_s
        self.DNI = DNI
        self.DHI = DHI
        self.GHI = GHI
        self.rho = rho

    def calculate_aoi(self):
        aoi = (np.cos(self.beta) * np.cos(self.teta_z)) + (np.sin(self.beta) * np.sin(self.teta_z) * np.cos(self.gamma_s - self.gamma))
        return aoi

    def calculate_beam_irradiance(self, aoi):
        if math.degrees(math.acos(aoi)) > 90:
            return 0
        else:
            return self.DNI * aoi

    def calculate_diffuse_irradiance(self):
        return self.DHI * (1 + np.cos(self.beta))/2

    def calculate_ground_reflected_irradiance(self):
        return self.GHI * self.rho * (1 - np.cos(self.beta))/2

# Load weather data from CSV file
df = pd.read_csv("2023_weather_data.csv"
                 , parse_dates=['TmStamp'], index_col='TmStamp')

# Define specific combinations of beta and gamma values
beta_gamma_combinations = [(0, 0), (90, 0), (45, 0), (45, 90)]  # in degrees
rho = 0.2  # Ground reflectivity

# Calculate the daily sums of 'DNI', 'DHI', 'SolarElevation' and 'SolarAzimuth'
daily_sums = df.resample('D').sum()
# Calculate the monthly averages of the daily sums
monthly_averages = daily_sums.resample('MS').mean()

# Initialize a dictionary to store annual energy for each combination of beta and gamma
annual_energy = {}

# Iterate over each specified combination of beta and gamma
for beta, gamma in beta_gamma_combinations:
    total_energy = 0  # Initialize total energy for the current combination

    # Iterate over each row (month) in the monthly averages
    for _, row in monthly_averages.iterrows():
        GPOA_values = []  # Initialize list to store GPOA values for the current month

        average_DNI = row['DNI']
        average_DHI = row['DHI']
        average_GHI = row['GHI']
        alfa_s = math.radians(row['SolarElevation'])  # in radians
        gamma_s = math.radians(row['SolarAzimuth'])  # in radians
        teta_z = math.radians(90 - row['SolarElevation'])  # in radians

        # Create an instance of SolarCalculator for the current combination of beta and gamma
        calculator = SolarCalculator(beta, gamma, teta_z, alfa_s, gamma_s, DNI, DHI, GHI, rho)

        # Calculate GPOA for the current month
        for _, row in monthly_averages.iterrows():
            beam_irradiance = calculator.calculate_beam_irradiance()
            diffuse_irradiance = calculator.calculate_diffuse_irradiance()
            ground_reflected_irradiance = calculator.ground_reflected_irradiance()
            GPOA = beam_irradiance + diffuse_irradiance + ground_reflected_irradiance

            GPOA_values.append(GPOA)

            # Calculate the number of days in the current month
            year = row.name.year
            month = row.name.month
            num_days = calendar.monthrange(year, month)[1]

            # Add the monthly energy to the total energy for the current combination
            total_energy += GPOA * num_days

        # Store the total energy for the current combination of beta and gamma
        annual_energy[(beta, gamma)] = total_energy

       


# Print the annual energy for each combination of beta and gamma
for combination, energy in annual_energy.items():
    print(f'Beta: {combination[0]}, Gamma: {combination[1]} - Annual Energy: {energy} kWh')